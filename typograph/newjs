const checkingText = document.querySelector(".text");
const btn = document.querySelector(".btn");
const copy = document.querySelector(".copy");
const deleteText = document.querySelector(".deleteText");

const replacementRules = [
  { search: "‚Äû", replace: " ¬´" },
  { search: "‚Äú", replace: "¬ª" },
  { search: " ‚Äú", replace: " ¬´" },
  { search: "‚Äù", replace: "¬ª" },
  { search: "\"", replace: "¬ª" },
  { search: "(\"", replace: "¬´" },
  { search: '\n¬ª', replace: '\n¬´' },
  { search: ' ¬ª', replace: ' ¬´' },
  { search: '(¬ª', replace: '(¬´' }
];

checkingText.addEventListener('input', () => {
  btn.removeAttribute('disabled');
  checkingText.classList.remove('access', 'access-copy');
});

btn.addEventListener("click", () => replaceQuotes());

function replaceQuotes() {
  let text = checkingText.value;
  replacementRules.forEach(rule => {
    text = text.replaceAll(rule.search, rule.replace);
  });
  checkingText.value = text.trim();
  checkingText.classList.add('access');
  copy.classList.remove("hidden");
}

// –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø—Ä–∏–≤ º—è–∑–∫–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π –∫–ª–∞–≤—ñ—à
function bindShortcut(func, ...codes) {
  const pressed = new Set();

  document.addEventListener('keydown', event => {
    pressed.add(event.code);
    if (codes.every(code => pressed.has(code))) {
      pressed.clear();
      func();
    }
  });

  document.addEventListener('keyup', event => {
    pressed.delete(event.code);
  });
}

bindShortcut(() => replaceQuotes(), "ControlLeft", "KeyX");

function copyText() {
  const text = checkingText.value;
  if (!text) return;

  navigator.clipboard.writeText(text);
  copy.value = '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ';
  copy.disabled = true;
  checkingText.classList.add('access-copy');

  setTimeout(() => {
    copy.value = '–ö–æ–ø—ñ—é–≤–∞—Ç–∏';
    copy.disabled = false;
  }, 2000);
}

copy.addEventListener('click', copyText);
bindShortcut(copyText, "ControlLeft", "KeyC");

function clearText() {
  checkingText.value = '';
  checkingText.style.minHeight = '';
  checkingText.classList.remove('access', 'access-copy');
  checkingText.setAttribute('placeholder', '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç');
  copy.classList.add("hidden");
  if (typeof pasted !== 'undefined') pasted.innerHTML = 0;
}

deleteText.addEventListener('click', clearText);
bindShortcut(clearText, "ControlLeft", "KeyQ");

// –ó–º—ñ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∫–ª–∞–¥–∫–∏
document.onblur = () => document.title = "¬´üò≥¬ª –ó–ê–ú–Ü–ù–ê";
document.onfocus = () => document.title = "–ó–∞–º—ñ–Ω–∞ –ª–∞–ø–æ–∫ –Ω–∞ —è–ª–∏–Ω–∫–∏ –æ–Ω–ª–∞–π–Ω || –ó–∞–º—ñ–Ω–∏—Ç–∏ –ª–∞–ø–∫–∏|| –∑–∞–º—ñ–Ω–∏—Ç–∏ –ª–∞–ø–∫–∏ –Ω–∞ —è–ª–∏–Ω–∫–∏ –æ–Ω–ª–∞–π–Ω";

const string = document.querySelector(".text");
const countOut = document.querySelector(".amount");
const pasted = document.querySelector(".pasted");
const btn = document.querySelector(".btn");

const date = new Date();
const registDate = `${date.getDate()}.${date.getMonth() + 1}.${date.getUTCFullYear()}`;

if (localStorage.getItem('date-typograph') !== registDate) {
  localStorage.clear();
}

let calc = 0;

string.addEventListener('input', () => {
  calc = countWords(string.value.trim());
  updateWordCount(calc);
  adjustHeight(calc);
});

function countWords(text) {
  if (text === '') return 0;
  return text.trim().split(/\s+/).length;
}

function updateWordCount(count) {
  pasted.textContent = count;
}

function adjustHeight(count) {
  string.style.minHeight = count < 100 ? '' : `${count + 300}px`;
}

btn.addEventListener("click", () => updateStorage(calc));

// –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ—à
function bindShortcut(func, ...codes) {
  const pressed = new Set();

  document.addEventListener('keydown', event => {
    pressed.add(event.code);
    if (codes.every(code => pressed.has(code))) {
      pressed.clear();
      func();
    }
  });

  document.addEventListener('keyup', event => {
    pressed.delete(event.code);
  });
}

bindShortcut(() => updateStorage(calc), "ControlLeft", "KeyX");

function updateStorage(value) {
  if (string.value.trim() === '' || value === 0) return;

  const storedDate = localStorage.getItem('date-typograph');
  let total = parseInt(localStorage.getItem('counter-typograph')) || 0;

  if (!storedDate || storedDate !== registDate) {
    localStorage.setItem('date-typograph', registDate);
    total = 0;
  }

  total += value;
  localStorage.setItem('counter-typograph', total);
  countOut.textContent = total;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
(function initCounter() {
  const storedCount = localStorage.getItem('counter-typograph');
  if (storedCount !== null) {
    countOut.textContent = storedCount;
    if (isNaN(storedCount)) location.reload();
  }
})();

